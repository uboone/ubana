#include "services_microboone.fcl"
#include "reco_uboone_data_mcc9_8.fcl"
#include "hitfindermodules_microboone.fcl"
#include "signalservices_microboone.fcl"
#include "hitanalysis_tools_uboone.fcl"
 

process_name: mcrecocheck

services:
{
    #Load the service that manages root files for histograms.
    TFileService: { fileName: "mcrecocheck_ana.root" }
    TimeTracker:  {}
    MemoryTracker:     { }     #default is one
    RandomNumberGenerator: {}                     #ART native random number generator
    #@table::microboone_full_services
    #@table::microboone_reco_data_services
    message:      @local::standard_info
    @table::microboone_services_reco
}

#services.DetectorProperties.NumberTimeSamples:                             6400
#services.DetectorProperties.ReadOutWindowSize:                             6400
services.DetectorClocksService.InheritClockConfig:                         false
services.DetectorClocksService.TriggerOffsetTPC:                          -0.400e3

services.SpaceCharge.EnableCorrSCE: true
services.SpaceCharge.EnableSimEFieldSCE: true
services.SpaceCharge.EnableSimSpatialSCE: true

#source is now a root file
source:
{
    module_type: RootInput
    maxEvents:  -1            # Number of events to create
}

outputs:
{
    out1:
    {
         module_type: RootOutput
         fileName:    "mcrecocheck.root"    #default file name, can override from command line with -o or --output
         fastCloning: false
    } 
}

physics:
{
 producers:{}
 filters:  {} 
 analyzers:{ mcrecocheck:
             {
                  module_type:                    MCRecoCheck
                  }
             
           }
 
 #define the producer and filter modules for this path, order matters, 
 ana:  [ mcrecocheck ]
 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [ stream1, ana ] 
 end_paths:     [  ana ] 
}
