#include "services_microboone.fcl"
#include "messageservice.fcl"
#include "time_memory_tracker_microboone.fcl"

# the process name is just a label and doesn't need to be anything specific, 
# however if you write a producer module, the process_name is used in the naming 
# of the data product, i.e. a set of pandoraNu tracks which are produced by a 
# fhicl file with the process_name McRecoStage2 will have a 
# label 'pandoraNu::McRecoStage2'
process_name: usingparticleid

# the services block is standard and defines and configures any of 
# the art services you use in the file (and some that are defined in fhicl) 
# this is a pretty standard set of services, to set you going
services:
{
    # Here, we set the fileName of the output ROOT file
    TFileService:  {fileName: "usingparticleid.root"}

    # these tell you information about the time and memory
    # used by running the fhicl file
    # @local just means "it's somewhere in one of the included fcl files, 
    # or maybe in one of the fhicl files included in that one...", etc.
    TimeTracker:   @local::microboone_time_tracker
    MemoryTracker: @local::microboone_memory_tracker
                   @table::microboone_simulation_services
}

# in this section, 'physics' and 'analyzers' are names set by larsoft,
# while 'usingassnsanamod' is customisable.
# if this was a producer module ('producers' rather than 'analyzers')
# then usingassnsanamod would be the label for the produced data
# products, i.e. it would be usingassnsanamod::usingassnsana
physics:
{
    analyzers:
    {
        tnpid:
        {
            # this is the name of the module you want to run
            module_type: "UsingParticleID"

            # this is read into the module
            TrackLabel: "pandoraNu::UBXSec"
            PIDLabel: "pid::particleid"
        }
    }

    analysis: [tnpid]
    end_paths: [analysis]

}

services.DetectorClocksService.InheritClockConfig: false

