#include "calorimetry_microboone.fcl"

BEGIN_PROLOG

wcls: {
   nfbadchannel : {
      module_type : WireCellToolkit
      wcls_main: {
         tool_type: WCLS
         apps: ["Pgrapher"]

         // Libraries in which to look for WCT components
         plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]

         // The tool marshals the art::Event to these visitors before
         inputers: ["wclsRawFrameSource", "wclsMultiChannelNoiseDB"]
         // or after the WCT app is run.
         outputers: ["wclsFrameSaver:nfsaver"]

         // This is relative to the wire-cell-cfg directory.  If the
         // "uboone/nfspl1/" part is split out by itself, just make
         // sure to still have around the top level cfg/*.jsonnet files.
         configs: ["pgrapher/experiment/uboone/wcls-nf-badchannel.jsonnet"]

         // Allow setting of select WCT parameters as
         //   key <--> scalar
         // value pairs.  Acceptable keys depend on how the Jsonnet
         // files given in "configs" are written.  The Jsonnet will
         // access the key via a call to the std.extVar(key) function.
         // An entry is equivalent to one "-V" option to wire-cell CLI.
         params : {
           raw_input_label: "daq"
	   reality: "data"
           epoch: "dynamic"
         }

         // Allow setting of select WCT parameters as
         //   key <--> structure
         // value pairs.  The structure is in the form of Jsonnet text.
         // Acceptable keys depend on how the
         // Jsonnet files given in "configs" are written.  The Jsonnet
         // will access the key via a call to the std.extVar(key)
         // function.  
         // An entry is equivalent to one "-C" option to wire-cell CLI.
         structs: {
         }
      }
   }

   nfspl1 : {
      module_type : WireCellToolkit
      wcls_main: {
         tool_type: WCLS
         apps: ["Pgrapher"]

         // Libraries in which to look for WCT components
         plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]

         // The tool marshals the art::Event to these visitors before
         inputers: ["wclsRawFrameSource", "wclsMultiChannelNoiseDB"]
         // or after the WCT app is run.
         //outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:thsaver", "wclsFrameSaver:spsaver"]
         outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver", "wclsFrameSaver:spthresholds"]

         // This is relative to the wire-cell-cfg directory.  If the
         // "uboone/nfspl1/" part is split out by itself, just make
         // sure to still have around the top level cfg/*.jsonnet files.
         configs: ["pgrapher/experiment/uboone/wcls-nf-sp.jsonnet"]

         // Allow setting of select WCT parameters as
         //   key <--> scalar
         // value pairs.  Acceptable keys depend on how the Jsonnet
         // files given in "configs" are written.  The Jsonnet will
         // access the key via a call to the std.extVar(key) function.
         // An entry is equivalent to one "-V" option to wire-cell CLI.
         params : {
           raw_input_label: "daq"
	   reality: "data"
           epoch: "dynamic"
         }

         // Allow setting of select WCT parameters as
         //   key <--> structure
         // value pairs.  The structure is in the form of Jsonnet text.
         // Acceptable keys depend on how the
         // Jsonnet files given in "configs" are written.  The Jsonnet
         // will access the key via a call to the std.extVar(key)
         // function.  
         // An entry is equivalent to one "-C" option to wire-cell CLI.
         structs: {
            // run with dynamic RMS cuts based on run and with larsoft
            // services for misconfigured channels
            // override: "{noisedb:{epoch:\"multi\", flavor:\"wcls\", run12boundary:7000}}"

            // Run without services
            //override: "{noisedb:{epoch:\"multi\", flavor:\"wct\", run12boundary:7000}}"
         }
      }
   }

   simnfspl1 : {
      module_type : WireCellToolkit
      wcls_main: {
         tool_type: WCLS
         apps: ["Pgrapher"]

         // Libraries in which to look for WCT components
         plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]

         // The tool marshals the art::Event to these visitors before
         inputers: ["wclsRawFrameSource"]
         // or after the WCT app is run.
         outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver", "wclsFrameSaver:spthresholds"]

         // This is relative to the wire-cell-cfg directory.  If the
         // "uboone/nfspl1/" part is split out by itself, just make
         // sure to still have around the top level cfg/*.jsonnet files.
         configs: ["pgrapher/experiment/uboone/wcls-nf-sp.jsonnet"]

         // Allow setting of select WCT parameters as
         //   key <--> scalar
         // value pairs.  Acceptable keys depend on how the Jsonnet
         // files given in "configs" are written.  The Jsonnet will
         // access the key via a call to the std.extVar(key) function.
         // An entry is equivalent to one "-V" option to wire-cell CLI.
         params : {
           raw_input_label: "driftWC:orig"
	   reality: "sim"
           epoch: "perfect"
         }

         // Allow setting of select WCT parameters as
         //   key <--> structure
         // value pairs.  The structure is in the form of Jsonnet text.
         // Acceptable keys depend on how the
         // Jsonnet files given in "configs" are written.  The Jsonnet
         // will access the key via a call to the std.extVar(key)
         // function.  
         // An entry is equivalent to one "-C" option to wire-cell CLI.
         structs: {
            // run with dynamic RMS cuts based on run and with larsoft
            // services for misconfigured channels
            // override: "{noisedb:{epoch:\"multi\", flavor:\"wcls\", run12boundary:7000}}"

            // Run without services
            //override: "{noisedb:{epoch:\"multi\", flavor:\"wct\", run12boundary:7000}}"
         }
      }
   }

   driftsim : {
      module_type : WireCellToolkit
      wcls_main: {
          tool_type: WCLS
          apps: ["Pgrapher"]
          plugins: ["WireCellPgraph", "WireCellGen","WireCellSio", "WireCellLarsoft"]
          configs: ["pgrapher/experiment/uboone/uboone-sim.jsonnet"]
          inputers: ["wclsSimDepoSource"]
          outputers: [
             "wclsSimChannelSink:postdrift",
             "wclsFrameSaver:simdigits"
          ]
          params: {
          }
	  structs: {
      	      gain_fudge_factor: 0.826
	      sys_resp: false

	      // Diffusion constants
	      DiffusionLongitudinal: 6.4  // unit: cm^2/s, configured in the jsonnet file
	      DiffusionTransverse:   9.8  // unit: cm^2/s, configured in the jsonnet file

	      // Electron lifetime
	      ElectronLifetime: 1000 // unit: ms, configured in the jsonnet file
      	  }
      }
   }

   driftsim_overlay : {
      module_type : WireCellToolkit
      wcls_main: {
          tool_type: WCLS
          apps: ["Pgrapher"]
          plugins: ["WireCellPgraph", "WireCellGen","WireCellSio", "WireCellLarsoft", "WireCellubsim"]
          configs: ["pgrapher/experiment/uboone/uboone-sim-overlay.jsonnet"]
          inputers: ["wclsSimDepoSource"
       		// only if miscfg is "dynamic" add "wclsChannelSelectorDB"
                 , "wclsChannelSelectorDB"
		// for YZ correction 
		 , "wclsReweightedDepoTransform:depotran0"
		 , "wclsReweightedDepoTransform:depotran1"
		 , "wclsReweightedDepoTransform:depotran2"
		// for "daily" lifetime
		 , "wclsUbDrifter"
		]
          outputers: [
             "wclsSimChannelSink:postdrift",
             "wclsFrameSaver:simdigits"
          ]
          params: {
      		//from database
                //only if a data event is consumed,
                //otherwise timestamp cannot be identified to search db
                miscfg: "dynamic"
 
                //static misconfigured channel list
                //must not add "wclsChannelSelectorDB" in inputers
                //miscfg: "static"
          }
	  structs: {
      	      gain_fudge_factor: 0.826
	
	      // variation of field response
	      sys_resp: false

	      // MC YZ correction
	      YZCorrfilenameMC: '"MC_YZCorr_mcc9_v1_efieldcorr.root"'
	      YZCorrhistnames: '["hCorr0","hCorr1","hCorr2"]' // plane U, V, Y
              #scaleDATA_perplane: '[0.0045, 0.0045, 0.0045]'
              #scaleMC_perplane:   '[0.0040, 0.0043, 0.0040]'
              scaleMC_perplane: @local::microboone_calorimetryalgmcc84mc_CalAreaConstantsWCLS
              scaleDATA_perplane: @local::microboone_calorimetryalgmcc84data_CalAreaConstantsWCLS

	      // Diffusion constants
	      DiffusionLongitudinal: 6.4  // unit: cm^2/s, configured in the jsonnet file
	      DiffusionTransverse:   9.8  // unit: cm^2/s, configured in the jsonnet file

              // Electron lifetime
              ElectronLifetime: 1000 // unit: ms, configured in the jsonnet file
              ELifetimeCorrection: true // or true; using lifetime database
      	  }
      }
   }

   # This rewrites existing raw::RawDigit and recob::Wire
   # collections in order to truncate and scale them.  This is not
   # WCT related but happens to run generic art modules currently
   # living in larwirecell.  The intention is to satisfy
   # assumptions made by legacy code.
   butcher : {
      module_type : "EventButcher"

      inRawTag: "nfspl1:raw:"
      inSigTag: "nfspl1:gauss:"

      # apparently downstream code is too brittle to handle giving
      # any instance names.

      outRawTag: ""
      outSigTag: ""
      outAssnTag: ""

      # throw away perfectly cromulent data.  very dubious but
      # that's what (non WC) people want.

      ndrop: 2400
      nkeep: 6400

      # match some arbitrary and inexplicable "ADC" charge scale
      # instead of number of ionized electrons.

      sigscale: 0.005
   }
   

}

END_PROLOG
