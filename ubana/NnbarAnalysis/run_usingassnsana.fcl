#include "services_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"

# the process name is just a label and doesn't need to be anything specific, 
# however if you write a producer module, the process_name is used in the naming 
# of the data product, i.e. a set of pandoraNu tracks which are produced by a 
# fhicl file with the process_name McRecoStage2 will have a 
# label 'pandoraNu::McRecoStage2'
process_name: usingassnsana 

# the services block is standard and defines and configures any of 
# the art services you use in the file (and some that are defined in fhicl) 
# this is a pretty standard set of services, to set you going
services:
{ 

  # Here, we set the fileName of the output ROOT file
  TFileService: {fileName: "usingassnsana_out.root"}

  # these tell you information about the time and memory
  # used by running the fhicl file
  # @local just means "it's somewhere in one of the included fcl files, 
  # or maybe in one of the fhicl files included in that one...", etc.
  TimeTracker: @local::microboone_time_tracker
  MemoryTracker: @local::microboone_memory_tracker

}
 
# in this section, 'physics' and 'analyzers' are names set by larsoft,
# while 'usingassnsanamod' is customisable.
# if this was a producer module ('producers' rather than 'analyzers')
# then usingassnsanamod would be the label for the produced data
# products, i.e. it would be usingassnsanamod::usingassnsana
physics:
{

  analyzers:
  {

    usingassnsanamod:
    {
      # this is the name of the module you want to run
      module_type: UsingAssnsAna

      # this is read into the module
      TrackLabel: "pandoraNu::McRecoStage2"
      TrackHitAssnLabel: "pandoraNu::McRecoStage2"

    }

  }

  # if you had multiple analyzer modules, you can define them in the
  # analyzers tag above, and then have say analysis: [ana1, ana2]
  analysis: [usingassnsanamod]
  end_paths: [analysis]
}

